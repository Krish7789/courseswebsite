{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectPEP\\\\courses\\\\src\\\\components\\\\Cards.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = props => {\n  _s();\n  if (category === \"All\") {\n    let courses = props.courses;\n    let category = props.category;\n    const [likedCourses, setLikedCourses] = useState([]);\n    // this function will help me to get all the data of all the courses in a single array\n    // returns you a list of all courses received from the api response\n    const getCourses = () => {\n      let allCourses = [];\n      // currently data in the array is in the form of key-value pair\n      Object.values(courses).forEach(array => {\n        array.forEach(courseData => {\n          allCourses.push(courseData);\n        });\n      });\n      return allCourses;\n    };\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards\",\n    children: getCourses().map(course => /*#__PURE__*/_jsxDEV(Card, {\n      course: course,\n      likedCourses: likedCourses,\n      setLikedCourses: setLikedCourses\n    }, course.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this) // making card for each course\n    )\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"KP37kmpS0XhdZPz1Rd7V6iwaxXc=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useState","Card","jsxDEV","_jsxDEV","Cards","props","_s","category","courses","likedCourses","setLikedCourses","getCourses","allCourses","Object","values","forEach","array","courseData","push","className","children","map","course","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ProjectPEP/courses/src/components/Cards.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cards = (props) => {\r\n    if(category===\"All\"){\r\n  let courses = props.courses;\r\n  let category=props.category;\r\nconst[likedCourses, setLikedCourses] =useState([]);\r\n  // this function will help me to get all the data of all the courses in a single array\r\n  // returns you a list of all courses received from the api response\r\n  const getCourses = () => {\r\n\r\n    let allCourses=[];\r\n    // currently data in the array is in the form of key-value pair\r\n    Object.values(courses).forEach(array => {\r\n      array.forEach(courseData => {\r\n        allCourses.push(courseData);\r\n      });\r\n    });\r\n    return allCourses;\r\n}\r\n  };\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n     {\r\n        getCourses().map((course) => (\r\n           <Card key={course.id} course={course} \r\n           likedCourses={likedCourses}\r\n           setLikedCourses={setLikedCourses}/> // making card for each course\r\n        ))\r\n    }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrB,IAAGC,QAAQ,KAAG,KAAK,EAAC;IACtB,IAAIC,OAAO,GAAGH,KAAK,CAACG,OAAO;IAC3B,IAAID,QAAQ,GAACF,KAAK,CAACE,QAAQ;IAC7B,MAAK,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAEV,QAAQ,CAAC,EAAE,CAAC;IAChD;IACA;IACA,MAAMW,UAAU,GAAGA,CAAA,KAAM;MAEvB,IAAIC,UAAU,GAAC,EAAE;MACjB;MACAC,MAAM,CAACC,MAAM,CAACN,OAAO,CAAC,CAACO,OAAO,CAACC,KAAK,IAAI;QACtCA,KAAK,CAACD,OAAO,CAACE,UAAU,IAAI;UAC1BL,UAAU,CAACM,IAAI,CAACD,UAAU,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOL,UAAU;IACrB,CAAC;EACC;EAAC;EAED,oBACET,OAAA;IAAKgB,SAAS,EAAC,OAAO;IAAAC,QAAA,EAElBT,UAAU,CAAC,CAAC,CAACU,GAAG,CAAEC,MAAM,iBACrBnB,OAAA,CAACF,IAAI;MAAiBqB,MAAM,EAAEA,MAAO;MACrCb,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA;IAAgB,GAFtBY,MAAM,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEc,CAAC,CAAC;IACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEV,CAAC;AAACrB,EAAA,CA/BIF,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAiCX,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}